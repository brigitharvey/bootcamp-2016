#
these are how to take notes
# this is how you take notes
# this will calculate the mean of 10 random standard normal variables
mean( rnorm(10))
mean(rnorm(10))
'?'(mean)
help("mean",htmlhelp = FALSE)
options(htmlhelp=FALSE)
options(htmlhelp=FALSE)
help(mean)
help("mean", htmlhelp= FALSE)
options(htmlhelp = FALSE)
help.search("mean")
apropos("mean")
#these are different commands related to the keyword mean
#help for functions that you have not downloaded yet
RSiteSearch("violin")
#success
RSiteSearch("violin", restrict = c("functions"))
#success
help(RSiteSearch)
#success
#B.2 Assignment
a <- 2 + 3
a
b <- a + a
a + a; a + b
#can perform two actions on one line with a semicolon, sometimes the semicolon is referred to as an "end of line" operator
#B.3 Data Structures
#scalar is a single real number
# a vector may be a column of scalars, vector is a group of numbers arranged in a row or column)
Y<- c(8.3, 8.6, 10.7, 10.8, 11, 11, 11.1, 11.2, 11.3, 11.4)
#Data appeared in Global Environment
#can also use an '=' instead of '<-'
#Sequences
1:4
4:1
-1:3
-(1:3)
seq(from = 1, to = 3, by = 0.2)
seq(1, 3, by = 0.2)
seq(1, 3, 0.2)
# can use 'by' or just add an additional comma
seq(1, 3, length = 7)
# length is 7 units
rep(1,3)
rep(1:3,2)
rep(1:3, each = 2)
#Getting information about vectors
sum(Y)
mean(Y)
max(Y)
length(Y)
summary(Y)
#vector can be a character or logical
Names <- c("Sarah", "Yunluan")
Names
b <- c(TRUE, FALSE)
b
#vectors can also be dates, complex numbers, real numbers, integers, factors- can also what classes of data it belongs to
class(Y)
class(b)
#when we test an object we get a logical vector back that tells us for each element whether the condition was true or false
Y > 10
Y > mean(Y)
Y == 11
a test of equal to
# a test of not equal to
Y != 11
#Algebra with vectors
#we can add, subtract, multiply and divide vectors
a <- 1:3
b <- 4:6
a + b
a * b
a/b
a + 1
a * 2
1/a
# R is recycling the scalar as many times as it needs to in order to match the length of the vector. If we try to multiply vectors of unequal length, R will perform the operation but may or may not give a warning- if multiply a vector of length 3 by vector of length 2, R gives warning
a * 1:2
#R recycles the shorter vector just enough to match the length of the longer vector
a * c(1, 2, 1)
#if multiply vectors of length 4 and 2, no error recieved
1:4 * 1:2
1:4 * c(1, 2, 1, 2)
# Extraction and missing values
#can extract or subset elements by identifying the rows or columns needed or providing a logical vector (TRUE or FALSE) of same length as vector I am subsetting
Y[1]
Y[1:3]
Y > mean(Y)
Y [Y > mean(Y)]
#missing data are NA, test which elements are missing with is.na
a <- c(5, 3, 6, NA)
a
is.na(a)
!is.na(a)
a[!is.na(a)]
na.exclude(a)
mean(a)
mean(a, na.rm = TRUE)
d <- na.exclude(a)
mean(d)
#mean removing the NA data
#Matrices
#a matrix is a two dimensional set of elements, for which all elements are of the same type
matrix(letters[1:4], ncol = 2)
M <- matrix(1:4, nrow = 2)
M
#matrix is filled by columns or column major order, can also do it by rows
M2 <- matrix(1:4, nrow = 2, byrow = TRUE)
M2
I <- diag(1, nrow = 2)
I
#Identity matrix plays a role, equivalent to the scalar 1. inverse of matrix M is M^-1 which is the matrix that also satisfies MM^-1 = I where I is the identiy matrix
Minv <- solve(M)
M %*% Minv
#Extraction of Matrices
M[1,2]
M[1,1:2]
M[,2]
#leaving either of the rows or the columns blank, R gives all rows or columns
M[,]
#Data Frames
#data frames are 2D, like spreadsheets and matrices, all columns have same number of rows, each column can have a different data type- a data frame can have names of species, experimental treatment, dimensions of species traits, as character, factor, and numeric variables
dat <-data.frame(species = c("S.altissima", "S.rugosa", 'E.graminifolia", "A. pilosus"), treatment = factor(c("Control", "Water", "Control", "Water")), height = c(1.1, 0.8, 0.9, 1) width = c(1, 1.7, 0.6, 0.2))
s
stop()
=
help
stp[]
== 45
#lksjfslkdjfalskjf
ghh
{}
f;dsljhl
df;shiose94p5er
stop()
stop( )
#use esc button to get rid of perpetual plus sign
dat <- data.frame(species = c("S.altissima", "S.rugosa", "E.graminifolia", "A.pilosus"), treatment = factor(c("Control", "Water", "Control", "Water")), height = c(1.1, 0.8, 0.9, 1) width = c(1, 1.7, 0.6, 0.2))
dat<-data.frame(species=c("S.altissima", "S.rugosa", "E.graminifolia", "A.pilosus"),treatment=factor(c("Control", "Water","Control","Water")),height=c(1.1,0.8,0.9,1),width=c(1,1.7,0.6,0.2))
dat
dat[2,]
dat[3, 4]
dat[,2] == "Water"
dat[dat[, 2] == "Water", ]
subset(dat, treatment == "Water")
View(dat)
#Done with 341-352
subset(dat, treatment == "Water")
#B4, B6, B13
help(mean)
# B.4 Functions
help("mean")
mean(1:4)
mean(1:4, trim = 0)
class(1:10)
class(warpbreaks)
summary(1:10)
summary(warpbreaks)
summary(lm(breaks ~ wool, data = warpbreaks))
MyBogusMean <- function(x, cheat= 0.05)
}
RealSales <- c(100, 200, 300)
MyBogusMean(RealSales)
MyBogusMean <- function(x,cheat=0.05)
{SumOfX <- sum(x)
n <- length(x)
trueMean <- SumOfX/n
}
MyBogusMean(RealSales)
RealSales <- c(100, 200, 300)
MyBogusMean(RealSales)
m <- matrix(1:10, nrow = 2)
m
apply(m, MARGIN = 1, mean)
apply(m, MARGIN = 2, sum)
?rowMeans
sapply(1:10, function(i) mean(rnorm(5)))
gens <- 10
output <- numeric(gens + 1)
for (t in 1:gens) output[t + 1] <- output[t] + round(rnorm(n = 1, mean = 0, sd = 2), 0)
output
data(trees)
attach(trees)
plot(Girth, Height)
par(mar = c(5, 4, 3, 2))
plot(Girth, VOlume, type = "n", main = "My Trees")
plot(Girth, Volume, type = "n", main = "My Trees")
points(Girth, Volume, type = "h", col = "lightgrey", pch = 19)
hts <- (Height - min(Height))/max(Height - min(Height))
my.colors <- hcl(h = 30 + 270 * hts, alpha = 0.9)
text(Girth, Volume, Height, col = my.colors, cex = 0.5 + hts)
trees.sort <- trees[order(trees$Girth, trees$Height)]
trees.sort <- trees[order(trees$Girth, trees$Height),]
matplot(trees.sort$Girth, trees.sort[, 2:3], type = "b")
text(18, 40, "Volume", col = "darkred")
text(10, 58, "Height")
quartz(, 4, 4)
par(mar = c(5, 4, 2, 4))
plot(Girth, Volume, main = "My Trees")
par(new = TRUE)
plot(Girth, Height, axes = FALSE, bty = "n", xlab = "", ylab = "", pch = 3)
axis(4)
mtext("Height", side = 4, line = 3)
par(mar = c(5, 4, 2, 4))
plot(Girth, Volume, main = "My Trees")
par(new = TRUE)
plot(Girth, Height, axes = FALSE, bty = "n", xlab = "", ylab = "", pch = 3)
axis(4)
mtext("Height", side = 4, line = 3)
quartz(width = 5, height = 3)
quartz(, 5, 5)
layout(matrix(c(1, 2, 3, 3), nrow = 2, byrow = TRUE))
plot(Girth, Height)
par(mar = c(3, 3, 1, 1), mgp = c(1.6, 0.2, 0), tcl = 0.2)
plot(Girth, Height)
par(mar = c(3, 3, 2, 1), mgp = c(1.6, 0.2, 0), tcl = 0.2)
plot(Girth, Height, axes = FALSE, xlim = c(8,22))
axis(1, tcl = -0.3)
axis(2, tick = F)
rug(Height, side = 2, col = 2)
title("A Third, Very Wide, Plot")
getwd()
quartz(, 4, 4)
plot(Height, Volume, main = "Tree Data")
dev.print(pdf, "MyTree.pdf")
setwd('/Users/brigitharvey/bootcamp-2016')
getwd()
?lm
xx <- 2
xx + xx
22 -> yy
yy
library(ape)
install.packages("ape")
library("ape", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library(ape)
list.files()
list.files()
setwd("/Users/brigitharvey/GitHub/bootcamp-2016")
list.files()
tt <- read.tree('tree.tre')
attributes(tt)
tt$tip.label[1:10]
?read
```{r,echo = F}
pruned.tree <- drop.tip(tt, tt$tip.label[1:7900])
plot(ladderize(pruned.tree), cex = 0.5)
for (ii in 1:5) { cat("\nthe number is ", ii)}
notfish <- c("bat", "dolphin", "toad", "soldier")
for(animal in notfish){cat(animal, "fish\n", sep="")}
?rnorm
rnorm(1)
rnorm(10)
rnorm(10, mean= 10)
s1 <- rnorm(1000, mean=0, sd=1)
s3 <- rnorm(1000, meam=0, sd=3)
s3 <- rnorm(1000, mean=0, sd=3)
> par(mfrow=c(2,1), mar=c(4, 4, 3, 2)) #sets plotting area and margins
par(mfrow=c(2,1), mar=c(4, 4, 3, 2)) #sets plotting area and margins
hist(s1,col=2,xlab="Value",main="Sigma=1")
hist(s3,col=4,xlab="Value",main="Sigma=3")
dev.off()
?expression
plot(s1)
plot(density(S1))
plot(density(s1))
lines(desnsity(s3), col=4, lwd=4)
> par(mfrow=c(1,1), mar=c(4, 4, 3, 2)) #sets plotting area and margins
par(mfrow=c(1,1), mar=c(4, 4, 3, 2)) #sets plotting area and margins
par(mfrow=c(1,1), mar=c(4, 4, 3, 2)) #sets plotting area and margins
distribution")
lines(desnsity(s3), col=4, lwd=4)
dev.off()
hist()
his()
dev.off
hist(s1, breaks=bins)
mean(s1)
mean(s1>1.96)
s1>1.96
sum(s1>1.96)
sum(s1>1.96)/1000
mean(s1<-1.96)
s1 <- rnorm(1000)
s1 <- rnorm(1000)
mean(s1<(-1.96))
